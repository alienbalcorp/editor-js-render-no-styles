{"version":3,"file":"editor-js-render-no-styles.cjs.production.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Header/Header.tsx","../src/utils/parseText.ts","../src/components/List/List.tsx","../src/components/Paragraph/Paragraph.tsx","../src/components/Image/Image.tsx","../src/components/Delimiter/Delimiter.tsx","../src/components/Code/Code.tsx","../src/components/RawTool/RawTool.tsx","../src/components/Quote/Quote.tsx","../src/components/Table/Table.tsx","../src/index.tsx","../src/utils/componentKeys.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { FC } from 'react';\nimport Styles from './Header.module.css';\n\ntype TLevel = 1 | 2 | 3 | 4 | 5 | 6;\n\nexport type THeaderData = {\n  level: TLevel;\n  text: string;\n};\n\nexport const Header: FC<THeaderData> = ({ level, text }) => {\n  return (() => {\n    switch (level) {\n      case 1:\n        return <h1 className={Styles.header}>{text}</h1>;\n      case 2:\n        return <h2 className={Styles.header}>{text}</h2>;\n      case 3:\n        return <h3 className={Styles.header}>{text}</h3>;\n      case 4:\n        return <h4 className={Styles.header}>{text}</h4>;\n      case 5:\n        return <h5 className={Styles.header}>{text}</h5>;\n      case 6:\n        return <h6 className={Styles.header}>{text}</h6>;\n      default:\n        return <h1 className={Styles.header}>{text}</h1>;\n    }\n  })();\n};\n","import parse from 'html-react-parser';\n\nexport const parseText = (text: string) => parse(text);\n","import React, { FC, useMemo } from 'react';\nimport Styles from './List.module.css';\nimport { parseText } from '../../utils/parseText';\n\nconst ORDERED_KEY = 'ordered';\nconst UNORDERED_KEY = 'unordered';\n\nexport type TListData = {\n  items: string[];\n  style?: typeof ORDERED_KEY | typeof UNORDERED_KEY;\n};\n\nexport const List: FC<TListData> = ({ items, style = UNORDERED_KEY }) => {\n  const orderedList = useMemo(() => style === UNORDERED_KEY, []);\n\n  return orderedList ? (\n    <ul className={Styles.list}>\n      {items.map((text, index) => (\n        <li className={Styles.listItem} key={index}>\n          {parseText(text)}\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <ol className={Styles.list}>\n      {items.map((text, index) => (\n        <li className={Styles.listItem} key={index}>\n          {parseText(text)}\n        </li>\n      ))}\n    </ol>\n  );\n};\n","import React, { FC } from 'react';\nimport Styles from './Paragraph.module.css';\nimport { parseText } from '../../utils/parseText';\n\nexport type TParagraphData = {\n  text: string;\n};\n\nexport const Paragraph: FC<TParagraphData> = ({ text }) => (\n  <p className={Styles.paragraph}>{parseText(text)}</p>\n);\n","import React, { FC } from 'react';\nimport Styles from './Image.module.css';\n\nexport type TImageData = {\n  file: {\n    url: string;\n  };\n  caption?: string;\n  withBorder?: boolean;\n  stretched?: boolean;\n  withBackground?: boolean;\n};\n\nexport const Image: FC<TImageData> = ({\n  file,\n  caption,\n  withBorder = false,\n  withBackground = false,\n  stretched = false,\n}) => {\n  return (\n    <figure className={stretched ? Styles.stretched : Styles.figure}>\n      {withBackground ? (\n        <div\n          className={!withBorder ? Styles.background : Styles.backgroundBorder}\n        >\n          <img\n            src={file.url}\n            className={!withBorder ? Styles.image : Styles.imageBorder}\n            alt={caption}\n          />\n        </div>\n      ) : (\n        <img\n          src={file.url}\n          className={!withBorder ? Styles.image : Styles.imageBorder}\n          alt={caption}\n        />\n      )}\n      {caption && <figcaption className={Styles.caption}>{caption}</figcaption>}\n    </figure>\n  );\n};\n","import React, { FC } from 'react';\nimport Styles from './Delimiter.module.css';\n\nexport type TDelimiterData = {};\n\nexport const Delimiter: FC<TDelimiterData> = () => (\n  <div className={Styles.delimiter} />\n);\n","import React, { FC } from 'react';\nimport Styles from './Code.module.css';\n\nexport type TCodeData = {\n  code: string;\n};\n\nexport const Code: FC<TCodeData> = ({ code }) => {\n  return (\n    <pre>\n      <code className={Styles.code}>{code}</code>\n    </pre>\n  );\n};\n","import React, { FC } from 'react';\nimport Styles from './RawTool.module.css';\n\nexport type TRawToolData = {\n  html: string;\n};\n\nexport const RawTool: FC<TRawToolData> = ({ html }) => {\n  return (\n    <pre>\n      <code className={Styles.rawTool}>{html}</code>\n    </pre>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { parseText } from '../../utils/parseText';\nimport Styles from './Quote.module.css';\n\nexport type TQuoteData = {\n  text: string;\n  caption: string;\n  alignment: 'left' | 'center';\n};\n\nexport const Quote: FC<TQuoteData> = ({ text, caption, alignment }) => {\n  const isTextCentered = useMemo(() => alignment === 'center', []);\n\n  return (\n    <figure className={Styles.figure}>\n      <blockquote\n        className={isTextCentered ? Styles.centeredQuote : Styles.blockquote}\n      >\n        <p className={Styles.paragraph}>{parseText(text)}</p>\n      </blockquote>\n      <figcaption>â€” {parseText(caption)}</figcaption>\n    </figure>\n  );\n};\n","import parse from 'html-react-parser';\nimport React, { FC } from 'react';\nimport Styles from './Table.module.css';\n\nexport type TTableData = {\n  content: string[][];\n  withHeadings: boolean;\n};\n\nexport const Table: FC<TTableData> = ({ withHeadings, content }) => {\n  const _content = content.slice();\n  const heading = withHeadings ? _content.splice(0, 1) : [];\n\n  return (\n    <div className={Styles.wrapper}>\n      <table className={Styles.table}>\n        {withHeadings && (\n          <thead className={Styles.tr}>\n            <tr>\n              {heading[0]?.map((text, index) => (\n                <th\n                  key={`${text}-${index}`}\n                  className={\n                    index === 0 || index === heading[0].length - 1\n                      ? Styles.tdBorderless\n                      : Styles.td\n                  }\n                >\n                  {parse(text)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n        )}\n        <tbody>\n          {_content.map((row, index) => (\n            <tr key={`row-${index}`} className={Styles.tr}>\n              {row.map((text, index) => (\n                <td\n                  key={`${text}-${index}`}\n                  className={\n                    index === 0 || index === row.length - 1\n                      ? Styles.tdBorderless\n                      : Styles.td\n                  }\n                >\n                  {parse(text)}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Header } from './components/Header';\nimport { List } from './components/List';\nimport { Paragraph } from './components/Paragraph';\nimport { Image } from './components/Image';\nimport { Delimiter } from './components/Delimiter';\nimport { Code } from './components/Code';\nimport { RawTool } from './components/RawTool';\nimport { Quote } from './components/Quote';\nimport { Table } from './components/Table';\n\nimport { IParser } from './types/ParserData';\n\nimport {\n  CODE_KEY,\n  DATA_KEY,\n  DELIMITER_KEY,\n  ERROR_KEY,\n  HEADER_KEY,\n  IMAGE_KEY,\n  LIST_KEY,\n  PARAGRAPH_KEY,\n  QUOTE_KEY,\n  RAW_TOOL_KEY,\n  TABLE_KEY,\n} from './utils/componentKeys';\n\nconst Parser: FC<Record<typeof DATA_KEY, IParser>> = ({ data }) => {\n  return (\n    <>\n      {data?.blocks?.map(item => {\n        const { type, data, id } = item;\n\n        switch (type) {\n          case HEADER_KEY:\n            return <Header key={id} level={data.level} text={data.text} />;\n          case PARAGRAPH_KEY:\n            return <Paragraph key={id} text={data.text} />;\n          case LIST_KEY:\n            return <List key={id} items={data.items} style={data.style} />;\n          case DELIMITER_KEY:\n            return <Delimiter key={id} />;\n          case IMAGE_KEY:\n            return (\n              <Image\n                key={id}\n                file={data.file}\n                caption={data.caption}\n                withBorder={data.withBorder}\n                withBackground={data.withBackground}\n                stretched={data.stretched}\n              />\n            );\n          case CODE_KEY:\n            return <Code key={id} code={data.code} />;\n          case RAW_TOOL_KEY:\n            return <RawTool key={id} html={data.html} />;\n          case QUOTE_KEY:\n            return (\n              <Quote\n                key={id}\n                text={data.text}\n                caption={data.caption}\n                alignment={data.alignment}\n              />\n            );\n          case TABLE_KEY:\n            return (\n              <Table\n                key={id}\n                content={data.content}\n                withHeadings={data.withHeadings}\n              />\n            );\n          default:\n            return <div key={ERROR_KEY}>Error!</div>;\n        }\n      })}\n    </>\n  );\n};\n\nexport {\n  Parser,\n  Header,\n  List,\n  Paragraph,\n  Image,\n  Delimiter,\n  Code,\n  RawTool,\n  Quote,\n  Table,\n};\n","export const HEADER_KEY = 'header';\nexport const PARAGRAPH_KEY = 'paragraph';\nexport const LIST_KEY = 'list';\nexport const DELIMITER_KEY = 'delimiter';\nexport const IMAGE_KEY = 'image';\nexport const CODE_KEY = 'code';\nexport const RAW_TOOL_KEY = 'rawTool';\nexport const QUOTE_KEY = 'quote';\nexport const TABLE_KEY = 'table';\n\nexport const DATA_KEY = 'data';\nexport const ERROR_KEY = 'error';\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Header","level","text","React","className","Styles","parseText","parse","List","items","_ref$style","orderedList","useMemo","map","index","key","Paragraph","Image","file","caption","_ref$withBorder","withBorder","_ref$withBackground","withBackground","_ref$stretched","stretched","src","url","alt","Delimiter","Code","code","RawTool","html","Quote","alignment","isTextCentered","Table","withHeadings","_content","content","slice","heading","splice","wrapper","table","tr","_heading$","length","tdBorderless","td","row","data","blocks","_data$blocks","item","id"],"mappings":"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"}